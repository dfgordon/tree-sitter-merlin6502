equ:
  alt: ['=']
  brief: equate
  desc: equate label with expression
  caveat: cannot equate a forward referenced label to zero page
  eg: ['lab  EQU  $1000','sum  =    lab+1']
  args: $._aexpr
  label: [var,global]
  version: [v8,v16,v16+,v32]
  category: assembler
ext:
  alt: []
  brief: external label
  desc: defines label as external for use by linker, i.e., import the label from another REL module
  caveat: null
  eg: ['lab  EXT','     EXT  lab1,lab2']
  args: optional(seq($.label_def,repeat(seq(',',$.label_def))))
  v8x: /.*/
  label: [var,global]
  version: [v8,v16,v16+,v32]
  category: assembler
exd:
  alt: []
  brief: external label direct page
  desc: defines label as a direct page external for use by linker, i.e., import the label from another REL module
  caveat: null
  eg: ['lab  EXD','     EXD  lab1,lab2']
  args: optional(seq($.label_def,repeat(seq(',',$.label_def))))
  label: [var,global]
  version: [v16+]
  category: assembler
ent:
  alt: []
  brief: entry label
  desc: defines label as entry for use by the linker, i.e., export the label to another REL module
  caveat: null
  eg: ['lab  ENT','     ENT  lab1,lab2']
  args: optional(seq($.label_ref,repeat(seq(',',$.label_ref))))
  v8x: /.*/
  label: [var,global]
  version: [v8,v16,v16+,v32]
  category: assembler
org:
  alt: []
  brief: set origin
  desc: set starting address of assembled code
  caveat: null
  eg: ['     ORG  $8000']
  args: optional($._aexpr)
  label: [var,global,local]
  version: [v8,v16,v16+,v32]
  category: assembler
rel:
  alt: []
  brief: relocatable code module
  desc: generate code compatible with relocating linker
  caveat: must occur prior to any labels
  eg: ['     REL']
  args: null
  label: [var,global,local]
  version: [v8,v16,v16+,v32]
  category: assembler
cas:
  alt: []
  brief: set case sensitivity
  desc: set case sensitivity
  caveat: extension ignores this pseudo-op
  eg: ['     CAS  SE  ; sensitive','     CAS  IN  ; insensitive']
  args: alias(choice('SE','IN'),$.enum)
  enum: ['SE','IN']
  label: [var,global,local]
  version: [v16+]
  category: assembler
obj:
  alt: []
  brief: set object
  desc: set the division line between symbol table and object code areas
  caveat: accepted only prior to start of code, must be in range $4000-$BFE0
  eg: ['     OBJ  $4000','     OBJ  START']
  args: $._aexpr
  label: [var,global,local]
  version: [v8,v16,v16+,v32]
  category: assembler
put:
  alt: []
  brief: put text file
  desc: insert a named file into the assembly source
  caveat: Not recursive.  Macro definitions not allowed in PUT file.  Prefix `T.` is assumed for DOS 3.3, unless first character is less than `@`. Suffix `.S` is assumed for ProDOS. Slot and drive are not accepted in ProDOS.
  eg: ['     PUT  /pre/source']
  args: $.filename
  label: [var,global,local]
  version: [v8,v16,v16+,v32]
  category: assembler
use:
  alt: []
  brief: use file as library
  desc: use text file as macro library
  caveat: Not recursive.  Prefix `T.` is assumed for DOS 3.3, unless first character is less than `@`. Suffix `.S` is assumed for ProDOS. Slot and drive are not accepted in ProDOS.
  eg: ['     USE  /lib/macros']
  args: $.filename
  label: [var,global,local]
  version: [v8,v16,v16+,v32]
  category: assembler
var:
  alt: []
  brief: setup variables
  desc: equate several variable labels in one step
  caveat: often used just prior to PUT
  eg: ['     VAR  1;$3;lab']
  args: seq($._aexpr,repeat(seq(';',$._aexpr)))
  label: [var,global,local]
  version: [v8,v16,v16+,v32]
  category: assembler
sav:
  alt: []
  brief: save object code
  desc: save object code to named file, starting at last SAV
  caveat: null
  eg: ['     SAV  /vol/prog']
  args: $.filename
  label: [var,global,local]
  version: [v8,v16,v16+,v32]
  category: assembler
typ:
  alt: []
  brief: set ProDOS file type
  desc: set filetype used by DSK or SAV, 0=none,6=BIN,255=SYS
  caveat: null
  eg: ['     TYPE  $06  ; binary file']
  args: $._aexpr
  label: [var,global,local]
  version: [v8,v16,v16+,v32]
  category: assembler
dsk:
  alt: []
  brief: assemble to disk
  desc: write assembled code directly to named file on disk
  caveat: null
  eg: ['     DSK  /vol/prog']
  args: $.filename
  label: [var,global,local]
  version: [v8,v16,v16+,v32]
  category: assembler
end:
  alt: []
  brief: end of source
  desc: ignore any trailing source code
  caveat: labels trailing END are not recognized
  eg: ['     END']
  args: null
  label: [var,global,local]
  version: [v8,v16,v16+,v32]
  category: assembler
dum:
  alt: []
  brief: dummy section
  desc: start a section that produces label values, but no object code. Expression gives the ORG of the section.
  caveat: null
  eg: ['     DUM  $1000']
  args: $._aexpr
  label: [var,global,local]
  version: [v8,v16,v16+,v32]
  category: assembler
dend:
  alt: []
  brief: end dummy section
  desc: mark the end of a dummy section
  caveat: null
  eg: ['     DEND']
  args: null
  label: [var,global,local]
  version: [v8,v16,v16+,v32]
  category: assembler
ast:
  alt: []
  brief: asterisks
  desc: print a line of asterisks
  caveat: null
  eg: ['     AST  10','     AST  X*2']
  args: $._aexpr
  label: [var,global,local]
  version: [v8,v16,v16+]
  category: formatting
cyc:
  alt: []
  brief: cycle time
  desc: calculate and print cycle times
  caveat: null
  eg:
    - '     CYC  ; cycles and total'
    - '     CYC  OFF  ; none'
    - '     CYC  AVE  ; cycles and average'
    - '     CYC  FLAGS  ; cycles and MX'
  enum: ['','OFF','AVE','FLAGS']
  args: optional(alias(choice('OFF','AVE','FLAGS'),$.enum))
  v8x: /FLAGS/
  label: [var,global,local]
  version: [v8,v16,v16+]
  category: formatting
dat:
  alt: []
  brief: date stamp
  desc: print the date and time, or insert in object code
  caveat: ProDOS only, object code arguments only for v16+
  eg:
    - '     DAT  ; screen/printer'
    - '     DAT  1  ; object code DD-MMM-YY'
    - '     DAT  2  ; object code MM/DD/YY'
    - '     DAT  3  ; object code DD-MMM-YY  H:MM:SS AM/PM'
    - '     DAT  4  ; object code MM/DD/YY  H:MM:SS AM/PM'
    - '* 5-8 positive ASCII versions'
  args: optional($._aexpr)
  v8x: /.*/
  v16x: /.*/
  label: [var,global,local]
  version: [v8,v16,v16+]
  category: formatting
exp:
  alt: []
  brief: expand macros
  desc: control macro expansion in the listing
  caveat: null
  eg: ['     EXP  ON  ; entire macro','     EXP OFF  ; only call','     EXP ONLY  ; only inner']
  enum: ['ON','OFF','ONLY']
  args: alias(choice('ON','OFF','ONLY'),$.enum)
  label: [var,global,local]
  version: [v8,v16,v16+]
  category: formatting
lst:
  alt: []
  brief: listing control
  desc: toggle listing, or send to file
  caveat: null
  eg: ['     LST  ON  ; start','     LST  OFF  ; stop','     LST  RTN  ; restore','     LST  FILE,list.out  ; to file']
  enum: ['','ON','OFF','RTN','FILE,NAME']
  args: optional(choice(alias(choice('ON','OFF','RTN'),$.enum),seq(alias('FILE',$.enum),',',$.filename)))
  v8x: /RTN|FILE/
  v16x: /FILE/
  label: [var,global,local]
  version: [v8,v16,v16+]
  category: formatting
lstdo:
  alt: []
  brief: list inactive areas
  desc: controls whether to list code where DO OFF is in effect
  caveat: null
  eg: ['     LSTDO  ; list DO OFF areas','     LSTDO  OFF  ; do not list DO OFF areas']
  enum: ['','OFF']
  args: optional(alias('OFF',$.enum))
  label: [var,global,local]
  version: [v8,v16,v16+]
  category: formatting
pag:
  alt: []
  brief: send formfeed
  desc: send formfeed to the printer
  caveat: no effect on screen listing
  eg: ['     PAG']
  args: null
  label: [var,global,local]
  version: [v8,v16,v16+]
  category: formatting
ttl:
  alt: []
  brief: define title heading
  desc: used to change title at top of a page during listing
  caveat: Merlin 16 only
  eg: ['     TTL  "Code Section A"']
  args: $.dstring
  label: [var,global,local]
  version: [v8,v16,v16+]
  category: formatting
skp:
  alt: []
  brief: skip lines
  desc: sends a number of carriage returns to the listing
  caveat: null
  eg: ['     SKP  5  ; skip 5 lines']
  args: $._aexpr
  label: [var,global,local]
  version: [v8,v16,v16+]
  category: formatting
tr:
  alt: []
  brief: truncate control
  desc: limits the object code printout to three bytes per source line
  caveat: null
  eg: ['     TR  ON','     TR  OFF','     TR  ADR  ; suppress bank byte']
  enum: ['ON','OFF','ADR']
  args: optional(alias(choice('ON','OFF','ADR'),$.enum))
  v8x: /ADR/
  label: [var,global,local]
  version: [v8,v16,v16+]
  category: formatting
asc:
  alt: []
  brief: ascii text
  desc: put delimited ascii text into object code, where delimiter can be any character
  caveat: details depend on Merlin version
  eg: ['     ASC  &Say "hello!"&,00','     ASC  #>X+Y  ; number to padded string']
  args: choice($._string_operand,$._num_str)
  label: [var,global,local]
  version: [v8,v16,v16+,v32]
  category: strings
dci:
  alt: []
  brief: dextral character inverted
  desc: ASC with last character high bit flipped
  caveat: null
  eg: ['     DCI  "Number 9"']
  args: $._string_operand
  label: [var,global,local]
  version: [v8,v16,v16+,v32]
  category: strings
inv:
  alt: []
  brief: inverse text
  desc: ASC with text in inverse format
  caveat: null
  eg: ['     INV  "WARNING",00']
  args: $._string_operand
  label: [var,global,local]
  version: [v8,v16,v16+,v32]
  category: strings
fls:
  alt: []
  brief: flashing text
  desc: ASC with text in flashing format
  caveat: null
  eg: ['     FLS  "DANGER",00']
  args: $._string_operand
  label: [var,global,local]
  version: [v8,v16,v16+,v32]
  category: strings
rev:
  alt: []
  brief: reverse text
  desc: ASC with d-string backwards in memory
  caveat: null
  eg: ['     REV  "racecar",00']
  args: $.dstring
  label: [var,global,local]
  version: [v8,v16,v16+,v32]
  category: strings
str:
  alt: []
  brief: ASC with leading length byte
  desc: ASC with leading length byte
  caveat: trailing hex not counted in length
  eg: ['     STR  "hello"']
  args: $._string_operand
  label: [var,global,local]
  version: [v8,v16,v16+,v32]
  category: strings
strl:
  alt: []
  brief: ASC with leading length word
  desc: ASC with leading length word
  caveat: trailing hex not counted in length
  eg: ['     STRL  "hello"']
  args: $._string_operand
  label: [var,global,local]
  version: [v16+,v32]
  category: strings
da:
  alt: [dw]
  brief: define address or word
  desc: define little endian address
  caveat: null
  eg: ['     DA $FDF0  ; F0 FD','     DA 10,$300  ; 0A 00 00 03','     DA dat1,dat2']
  args: seq($._aexpr,repeat(seq(',',$._aexpr)))
  label: [var,global,local]
  version: [v8,v16,v16+,v32]
  category: data storage
ddb:
  alt: []
  brief: define double byte
  desc: define big endian address
  caveat: null
  eg: ['     DDB $FDF0  ; FD F0','     DDB 10,$300  ; 00 0A 03 00','     DDB dat1,dat2']
  args: seq($._aexpr,repeat(seq(',',$._aexpr)))
  label: [var,global,local]
  version: [v8,v16,v16+,v32]
  category: data storage
dfb:
  alt: [db]
  brief: define byte
  desc: define byte, selects low byte, \# and < ignored, > selects high byte
  caveat: null
  eg: ['     DFB $FDF0  ; F0','     DFB 10,31  ; 0A 1F','     DB dat1,dat2']
  args: seq($._data_aexpr,repeat(seq(',',$._data_aexpr)))
  label: [var,global,local]
  version: [v8,v16,v16+,v32]
  category: data storage
flo:
  alt: []
  brief: floating point constant
  desc: converts a dstring to a 10-byte floating point constant
  caveat: null
  eg: ["     FLO  '3.1416'"]
  args: $.dstring
  label: [var,global,local]
  version: [v16+,v32]
  category: data storage
adr:
  alt: []
  brief: define long address
  desc: define 3 byte long address
  caveat: null
  eg: ['     ADR $01FDF0  ; F0 FD 01','     ADR 10  ; 0A 00 00','     ADR dat1,dat2']
  args: seq($._aexpr,repeat(seq(',',$._aexpr)))
  v8x: /.*/ 
  label: [var,global,local]
  version: [v16,v16+,v32]
  category: data storage
adrl:
  alt: []
  brief: define long address
  desc: define 4 byte long address
  caveat: null
  eg: ['     ADRL $01FDF0  ; F0 FD 01 00','     ADRL 10  ; 0A 00 00 00','     ADRL dat1,dat2']
  args: seq($._aexpr,repeat(seq(',',$._aexpr)))
  v8x: /.*/ 
  label: [var,global,local]
  version: [v16,v16+,v32]
  category: data storage
hex:
  alt: []
  brief: hex data
  desc: insert plain hex data
  caveat: null
  eg: ['     HEX 0A0B0C0D','     HEX 0A,0B,0C,0D']
  args: $.hex_data
  label: [var,global,local]
  version: [v8,v16,v16+,v32]
  category: data storage
ds:
  alt: []
  brief: define storage
  desc: reserve space for string storage data
  caveat: using \ in REL file loads next file at page boundary
  eg:
    - '     DS  10  ; zero 10 bytes'
    - '     DS  10,$80  ; put $80 in 10 bytes'
    - '     DS  \  ; zero to next page'
    - '     DS  \,$80 ; $80 to next page'
    - '     DS  \,EXPR ; EXPR to next page'
  args: choice($._aexpr,seq($._aexpr,',',$._aexpr),'\\',seq('\\',',',$._aexpr))
  label: [var,global,local]
  version: [v8,v16,v16+,v32]
  category: data storage
do:
  alt: []
  brief: do if true
  desc: if expression is zero, stop generating object code
  caveat: null
  eg:
    - '     DO  0  ; assembly off'
    - '     DO  1  ; assembly on'
    - '     DO  LAB  ; if LAB assemble'
    - '     DO  LAB/2  ; if LAB>1 assemble'
  args: $._aexpr
  label: [var,global,local]
  version: [v8,v16,v16+,v32]
  category: conditionals
else:
  alt: []
  brief: invert the last do
  desc: invert the last do
  caveat: null
  eg: ['     ELSE']
  args: null
  label: [var,global,local]
  version: [v8,v16,v16+,v32]
  category: conditionals
if:
  alt: []
  brief: test first character or MX, where MX is a two-bit number
  desc: if first character of variable matches, or if expression starting with MX is true, then assemble
  caveat: null
  eg:
    - '     IF  A=]1  ; if ]1 starts with A, assemble'
    - '     IF  MX  ; if M or X assemble'
    - '     IF  MX/2  ; if M assemble'
    - '* any expression starting with MX is valid'
  args: choice($.if_char,$.if_mx)
  v8x: /^MX/
  label: [var,global,local]
  version: [v8,v16,v16+,v32]
  category: conditionals
fin:
  alt: []
  brief: cancel last DO or IF
  desc: cancel last DO or IF
  caveat: null
  eg: ['     FIN']
  args: null
  label: [var,global,local]
  version: [v8,v16,v16+,v32]
  category: conditionals
chk:
  alt: []
  brief: checksum
  desc: put checksum in object code
  caveat: null
  eg: ['     CHK']
  args: null
  label: [var,global,local]
  version: [v8,v16,v16+,v32]
  category: miscellaneous
err:
  alt: []
  brief: force error
  desc: force error
  caveat: Merlin 16+ ignores this unless the expression evaluates to zero page
  eg:
    - '     ERR  */$9600  ; throw if PC reaches $9600'
    - '     ERR  ($300)-$4C  ; throw if $300 does not contain $4C'
    - '     ERR  \$8FFF  ; throw if REL code reaches $9000'
  args: choice($.ptr_check,seq(optional('\\'),$._aexpr))
  label: [var,global,local]
  version: [v8,v16,v16+,v32]
  category: miscellaneous
kbd:
  alt: []
  brief: define label from keyboard
  desc: define label from keyboard
  caveat: null
  eg:
    - 'OUT  KBD  ; OUT is read from keyboard'
    - 'OUT  ERR  "enter: "  ; with prompt'
  args: optional($.dstring)
  label: [var,global,local]
  version: [v8,v16,v16+]
  category: miscellaneous
lup:
  alt: []
  brief: begin loop
  desc: begin loop
  caveat: at-symbol is used to form iterated labels
  eg:
    - '     LUP  NUM   ; start'
    - ']I   =    ]I+1  ; increment'
    - 'IT@  DFB  ]I    ; iterated label'
    - '     --^        ; end loop'
  args: $._aexpr
  label: [var,global,local]
  version: [v8,v16,v16+,v32]
  category: miscellaneous
--^:
  alt: []
  brief: end of loop
  desc: end of loop
  caveat: null
  eg: ['     --^']
  args: null
  label: [var,global,local]
  version: [v8,v16,v16+,v32]
  category: miscellaneous
mx:
  alt: []
  brief: long status mode
  desc: set intended long status of the 65816
  caveat: null
  eg: ['     MX  %10  ; M is 8 bit, X is 16 bit']
  args: $._aexpr
  v8x: /.*/ 
  label: [var,global,local]
  version: [v16,v16+,v32]
  category: miscellaneous
pau:
  alt: []
  brief: pause
  desc: pause listing at this point until keypress
  caveat: null
  eg: ['     PAU']
  args: null
  label: [var,global,local]
  version: [v8,v16,v16+]
  category: miscellaneous
sw:
  alt: []
  brief: enable sweet 16
  desc: enable sweet 16
  caveat: Merlin 8, extension does not support
  eg: ['     SW']
  args: null
  label: [var,global,local]
  version: [v8]
  category: miscellaneous
usr:
  alt: []
  brief: user defined
  desc: user defined
  caveat: null
  args: $.literal
  label: [var,global,local]
  version: [v8,v16,v16+,v32]
  category: miscellaneous
xc:
  alt: []
  brief: extended opcodes
  desc: enable or disable processor instructions
  caveat: specific behavior depends on Merlin version
  eg: ['     XC','     XC  OFF']
  enum: ['','OFF']
  args: optional(alias('OFF',$.enum))
  v8x: /.*/
  v16x: /.*/
  label: [var,global,local]
  version: [v8,v16,v16+,v32]
  category: miscellaneous
mac:
  alt: []
  brief: begin macro
  desc: start of a macro definition
  caveat: assigned label cannot be referenced except as a macro call
  eg: ['mymacro  MAC']
  args: null
  label: [var,global]
  version: [v8,v16,v16+,v32]
  category: macro
eom:
  alt: ['<<<']
  brief: end macro
  desc: end of a macro definition
  caveat: null
  eg: ['     EOM','     <<<']
  args: null
  label: [var,global]
  version: [v8,v16,v16+,v32]
  category: macro
pmc:
  alt: ['>>>']
  brief: put macro call
  desc: call the named macro
  caveat: macro label can also go directly in the instruction column
  eg: ['     PMC mymac','     >>> mymac,arg1;arg2']
  args: seq($.macro_ref,optional(seq($._arg_sep,$.arg_macro)))
  label: [var,global,local]
  version: [v8,v16,v16+,v32]
  category: macro