equ:
  alt: ['=']
  brief: equate
  desc: equate label with expression
  caveat: cannot equate to zero page number after label has been used
  args: $._aexpr
  label: [var,global]
  version: [v8,v16,v16+,v32]
  category: assembler
ext:
  alt: []
  brief: external label
  desc: defines label as external for use by linker
  caveat: null
  args: optional(seq($._label,repeat(seq(',',$._label))))
  v8x: /.*/
  label: [var,global]
  version: [v8,v16,v16+,v32]
  category: assembler
exd:
  alt: []
  brief: external label direct page
  desc: defines label as a direct page external for use by linker
  caveat: null
  args: optional(seq($._label,repeat(seq(',',$._label))))
  label: [var,global]
  version: [v16+]
  category: assembler
ent:
  alt: []
  brief: entry label
  desc: defines label as referenceable to an external label by another REL module
  caveat: null
  args: optional(seq($._label,repeat(seq(',',$._label))))
  v8x: /.*/
  label: [var,global]
  version: [v8,v16,v16+,v32]
  category: assembler
org:
  alt: []
  brief: set origin
  desc: set starting address of assembled code
  caveat: null
  args: optional($._aexpr)
  label: [var,global,local]
  version: [v8,v16,v16+,v32]
  category: assembler
rel:
  alt: []
  brief: relocatable code module
  desc: generate code compatible with relocating linker
  caveat: must occur prior to any labels
  args: null
  label: [var,global,local]
  version: [v8,v16,v16+,v32]
  category: assembler
cas:
  alt: []
  brief: set case sensitivity
  desc: set case sensitivity, CAS SE sets case sensitive, CAS IN sets case insensitive
  caveat: extension ignores this pseudo-op
  args: alias(choice('SE','IN'),$.enum)
  label: [var,global,local]
  version: [v16+]
  category: assembler
obj:
  alt: []
  brief: set object
  desc: set the division line between symbol table and object code areas
  caveat: accepted only prior to start of code, must be in range $4000-$BFE0
  args: $._aexpr
  label: [var,global,local]
  version: [v8,v16,v16+,v32]
  category: assembler
put:
  alt: []
  brief: put text file
  desc: insert a named file into the assembly source
  caveat: Not recursive.  Macro definitions not allowed in PUT file.  Prefix `T.` is assumed for DOS 3.3, unless first character is less than `@`. Slot and drive are not accepted in ProDOS.
  args: $.filename
  label: [var,global,local]
  version: [v8,v16,v16+,v32]
  category: assembler
use:
  alt: []
  brief: use file as library
  desc: use text file as macro library
  caveat: null
  args: $.filename
  label: [var,global,local]
  version: [v8,v16,v16+,v32]
  category: assembler
var:
  alt: []
  brief: setup variables
  desc: equate several variable labels in one step
  caveat: often used just prior to PUT
  args: $._aexpr,repeat(seq(';',$._aexpr))
  label: [var,global,local]
  version: [v8,v16,v16+,v32]
  category: assembler
sav:
  alt: []
  brief: save object code
  desc: save object code to named file, starting at last SAV
  caveat: null
  args: $.filename
  label: [var,global,local]
  version: [v8,v16,v16+,v32]
  category: assembler
typ:
  alt: []
  brief: set ProDOS file type
  desc: set filetype used by DSK or SAV, 0=none,6=BIN,255=SYS
  caveat: null
  args: $._aexpr
  label: [var,global,local]
  version: [v8,v16,v16+,v32]
  category: assembler
dsk:
  alt: []
  brief: assemble to disk
  desc: write assembled code directly to named file on disk
  caveat: null
  args: $.filename
  label: [var,global,local]
  version: [v8,v16,v16+,v32]
  category: assembler
end:
  alt: []
  brief: end of source
  desc: ignore any trailing source code
  caveat: labels trailing END are not recognized
  args: null
  label: [var,global,local]
  version: [v8,v16,v16+,v32]
  category: assembler
dum:
  alt: []
  brief: dummy section
  desc: start a section that produces label values, but no object code. Expression gives the ORG of the section.
  caveat: null
  args: $._aexpr
  label: [var,global,local]
  version: [v8,v16,v16+,v32]
  category: assembler
dend:
  alt: []
  brief: end dummy section
  desc: mark the end of a dummy section
  caveat: null
  args: null
  label: [var,global,local]
  version: [v8,v16,v16+,v32]
  category: assembler
ast:
  alt: []
  brief: asterisks
  desc: print a line of asterisks
  caveat: null
  args: $._aexpr
  label: [var,global,local]
  version: [v8,v16,v16+]
  category: formatting
cyc:
  alt: []
  brief: cycle time
  desc: calculate and print cycle times
  caveat: null
  args: optional(alias(choice('OFF','AVE','FLAGS'),$.enum))
  v8x: /FLAGS/
  label: [var,global,local]
  version: [v8,v16,v16+]
  category: formatting
dat:
  alt: []
  brief: date stamp
  desc: print the date and time
  caveat: ProDOS only
  args: optional($._aexpr)
  v8x: /.*/
  v16x: /.*/
  label: [var,global,local]
  version: [v8,v16,v16+]
  category: formatting
exp:
  alt: []
  brief: expand macros
  desc: ON prints entire macro, OFF prints only PMC, ONLY omits call line and end of macro line
  caveat: null
  args: alias(choice('ON','OFF','ONLY'),$.enum)
  label: [var,global,local]
  version: [v8,v16,v16+]
  category: formatting
lst:
  alt: []
  brief: listing control
  desc: ON starts listing, OFF stops listing, RTN restores to whatever was before the last LST
  caveat: null
  args: optional(choice(alias(choice('ON','OFF','RTN'),$.enum),seq(alias('FILE',$.enum),',',$.filename)))
  v8x: /RTN|FILE/
  v16x: /FILE/
  label: [var,global,local]
  version: [v8,v16,v16+]
  category: formatting
lstdo:
  alt: []
  brief: list inactive areas
  desc: controls whether to list code where DO OFF is in effect
  caveat: null
  args: optional(alias('OFF',$.enum))
  label: [var,global,local]
  version: [v8,v16,v16+]
  category: formatting
pag:
  alt: []
  brief: send formfeed
  desc: send formfeed to the printer
  caveat: no effect on screen listing
  args: null
  label: [var,global,local]
  version: [v8,v16,v16+]
  category: formatting
ttl:
  alt: []
  brief: define title heading
  desc: used to change title at top of a page during listing
  caveat: Merlin 16 only
  args: $.dstring
  label: [var,global,local]
  version: [v8,v16,v16+]
  category: formatting
skp:
  alt: []
  brief: skip lines
  desc: sends a number of carriage returns to the listing
  caveat: null
  args: $._aexpr
  label: [var,global,local]
  version: [v8,v16,v16+]
  category: formatting
tr:
  alt: []
  brief: truncate control
  desc: limits the object code printout to three bytes per source line
  caveat: ADR only for Merlin 16 (suppress bank byte)
  args: optional(alias(choice('ON','OFF','ADR'),$.enum))
  v8x: /ADR/
  label: [var,global,local]
  version: [v8,v16,v16+]
  category: formatting
asc:
  alt: []
  brief: ascii text
  desc: put delimited ascii text into object code, where delimiter can be any character
  caveat: delimiter affects ASCII sign, e.g. "sample" is negative, while 'sample' is positive
  args: choice($._string_operand,$._num_str)
  label: [var,global,local]
  version: [v8,v16,v16+,v32]
  category: strings
dci:
  alt: []
  brief: dextral character inverted
  desc: same as ASC except string last character has opposite high bit
  caveat: null
  args: $._string_operand
  label: [var,global,local]
  version: [v8,v16,v16+,v32]
  category: strings
inv:
  alt: []
  brief: inverse text
  desc: put text in inverse format
  caveat: null
  args: $._string_operand
  label: [var,global,local]
  version: [v8,v16,v16+,v32]
  category: strings
fls:
  alt: []
  brief: flashing text
  desc: put text in flashing format
  caveat: null
  args: $._string_operand
  label: [var,global,local]
  version: [v8,v16,v16+,v32]
  category: strings
rev:
  alt: []
  brief: reverse text
  desc: put d-string backwards in memory
  caveat: null
  args: $.dstring
  label: [var,global,local]
  version: [v8,v16,v16+,v32]
  category: strings
str:
  alt: []
  brief: put delimited string with leading length byte
  desc: put delimited string with leading length byte
  caveat: trailing hex not counted in length
  args: $._string_operand
  label: [var,global,local]
  version: [v8,v16,v16+,v32]
  category: strings
strl:
  alt: []
  brief: put delimited string with leading length word
  desc: put delimited string with leading length word
  caveat: trailing hex not counted in length
  args: $._string_operand
  label: [var,global,local]
  version: [v16+,v32]
  category: strings
da:
  alt: [dw]
  brief: define address or word
  desc: define little endian address
  caveat: null
  args: $._aexpr,repeat(seq(',',$._aexpr))
  label: [var,global,local]
  version: [v8,v16,v16+,v32]
  category: data storage
ddb:
  alt: []
  brief: define double byte
  desc: define big endian address
  caveat: null
  args: $._aexpr,repeat(seq(',',$._aexpr))
  label: [var,global,local]
  version: [v8,v16,v16+,v32]
  category: data storage
dfb:
  alt: [db]
  brief: define byte
  desc: define byte, selects low byte, \# and < ignored, > selects high byte
  caveat: null
  args: $._data_aexpr,repeat(seq(',',$._data_aexpr))
  label: [var,global,local]
  version: [v8,v16,v16+,v32]
  category: data storage
flo:
  alt: []
  brief: floating point constant
  desc: converts a dstring to a 10-byte floating point constant
  caveat: null
  args: $.dstring
  label: [var,global,local]
  version: [v16+,v32]
  category: data storage
adr:
  alt: []
  brief: define long address
  desc: define 3 byte long address
  caveat: null
  args: $._aexpr,repeat(seq(',',$._aexpr))
  v8x: /.*/ 
  label: [var,global,local]
  version: [v16,v16+,v32]
  category: data storage
adrl:
  alt: []
  brief: define long address
  desc: define 4 byte long address
  caveat: null
  args: $._aexpr,repeat(seq(',',$._aexpr))
  v8x: /.*/ 
  label: [var,global,local]
  version: [v16,v16+,v32]
  category: data storage
hex:
  alt: []
  brief: hex data
  desc: insert plain hex data
  caveat: null
  args: $.hex_data
  label: [var,global,local]
  version: [v8,v16,v16+,v32]
  category: data storage
ds:
  alt: []
  brief: define storage
  desc: reserve space for string storage data
  caveat: null
  args: choice($._aexpr,seq($._aexpr,',',$._aexpr),'\\',seq('\\',',',$._aexpr))
  label: [var,global,local]
  version: [v8,v16,v16+,v32]
  category: data storage
do:
  alt: []
  brief: do if true
  desc: if expression is zero, stop generating object code
  caveat: null
  args: $._aexpr
  label: [var,global,local]
  version: [v8,v16,v16+,v32]
  category: conditionals
else:
  alt: []
  brief: invert the last do
  desc: invert the last do
  caveat: null
  args: null
  label: [var,global,local]
  version: [v8,v16,v16+,v32]
  category: conditionals
if:
  alt: []
  brief: test first character or MX
  desc: if first character of variable matches, or if expression starting with MX is true, then assemble
  caveat: null
  args: choice($.if_char,$.if_mx)
  v8x: /^MX/
  label: [var,global,local]
  version: [v8,v16,v16+,v32]
  category: conditionals
fin:
  alt: []
  brief: cancel last DO or IF
  desc: cancel last DO or IF
  caveat: null
  args: null
  label: [var,global,local]
  version: [v8,v16,v16+,v32]
  category: conditionals
chk:
  alt: []
  brief: checksum
  desc: put checksum in object code
  caveat: null
  args: null
  label: [var,global,local]
  version: [v8,v16,v16+,v32]
  category: miscellaneous
err:
  alt: []
  brief: force error
  desc: force error
  caveat: Merlin 16+ ignores this unless the expression evaluates to zero page
  args: choice($.ptr_check,seq(optional('\\'),$._aexpr))
  label: [var,global,local]
  version: [v8,v16,v16+,v32]
  category: miscellaneous
kbd:
  alt: []
  brief: define label from keyboard
  desc: define label from keyboard
  caveat: null
  args: optional($.dstring)
  label: [var,global,local]
  version: [v8,v16,v16+]
  category: miscellaneous
lup:
  alt: []
  brief: begin loop
  desc: begin loop
  caveat: null
  args: $._aexpr
  label: [var,global,local]
  version: [v8,v16,v16+,v32]
  category: miscellaneous
--^:
  alt: []
  brief: end of loop
  desc: end of loop
  caveat: null
  args: null
  label: [var,global,local]
  version: [v8,v16,v16+,v32]
  category: miscellaneous
mx:
  alt: []
  brief: long status mode
  desc: set intended long status of the 65816
  caveat: null
  args: $._aexpr
  v8x: /.*/ 
  label: [var,global,local]
  version: [v16,v16+,v32]
  category: miscellaneous
pau:
  alt: []
  brief: pause
  desc: pause until keypress
  caveat: null
  args: null
  label: [var,global,local]
  version: [v8,v16,v16+]
  category: miscellaneous
sw:
  alt: []
  brief: enable sweet 16
  desc: enable sweet 16
  caveat: Merlin 8
  args: null
  label: [var,global,local]
  version: [8]
  category: miscellaneous
usr:
  alt: []
  brief: user defined
  desc: user defined
  caveat: null
  args: $.literal
  label: [var,global,local]
  version: [v8,v16,v16+,v32]
  category: miscellaneous
xc:
  alt: []
  brief: extended opcodes
  desc: once enables 65C02, twice enables 65816, with argument OFF disables both
  caveat: null
  args: optional(alias('OFF',$.enum))
  v8x: /.*/
  v16x: /.*/
  label: [var,global,local]
  version: [v8,v16,v16+]
  category: miscellaneous
mac:
  alt: []
  brief: begin macro
  desc: start of a macro definition
  caveat: assigned label cannot be referenced except as a macro call
  args: null
  label: [var,global]
  version: [v8,v16,v16+,v32]
  category: macro
eom:
  alt: ['<<<']
  brief: end macro
  desc: end of a macro definition
  caveat: null
  args: null
  label: [var,global]
  version: [v8,v16,v16+,v32]
  category: macro
pmc:
  alt: ['>>>']
  brief: put macro call
  desc: call the named macro
  caveat: null
  args: field('mac',$.global_label),optional(seq($._arg_sep,$.macro_args))
  label: [var,global,local]
  version: [v8,v16,v16+,v32]
  category: macro