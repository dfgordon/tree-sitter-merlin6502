{
    "--^": {
        "alt": [],
        "args": null,
        "brief": "end of loop",
        "category": "miscellaneous",
        "caveat": null,
        "desc": "end of loop",
        "label": [
            "var",
            "global",
            "local"
        ],
        "version": [
            "v8",
            "v16",
            "v16+",
            "v32"
        ]
    },
    "adr": {
        "alt": [],
        "args": "$._aexpr,repeat(seq(',',$._aexpr))",
        "brief": "define long address",
        "category": "data storage",
        "caveat": null,
        "desc": "define 3 byte long address",
        "label": [
            "var",
            "global",
            "local"
        ],
        "v8x": "/.*/",
        "version": [
            "v16",
            "v16+",
            "v32"
        ]
    },
    "adrl": {
        "alt": [],
        "args": "$._aexpr,repeat(seq(',',$._aexpr))",
        "brief": "define long address",
        "category": "data storage",
        "caveat": null,
        "desc": "define 4 byte long address",
        "label": [
            "var",
            "global",
            "local"
        ],
        "v8x": "/.*/",
        "version": [
            "v16",
            "v16+",
            "v32"
        ]
    },
    "asc": {
        "alt": [],
        "args": "choice($._string_operand,$._num_str)",
        "brief": "ascii text",
        "category": "strings",
        "caveat": "delimiter affects ASCII sign, e.g. \"sample\" is negative, while 'sample' is positive",
        "desc": "put delimited ascii text into object code, where delimiter can be any character",
        "label": [
            "var",
            "global",
            "local"
        ],
        "version": [
            "v8",
            "v16",
            "v16+",
            "v32"
        ]
    },
    "ast": {
        "alt": [],
        "args": "$._aexpr",
        "brief": "asterisks",
        "category": "formatting",
        "caveat": null,
        "desc": "print a line of asterisks",
        "label": [
            "var",
            "global",
            "local"
        ],
        "version": [
            "v8",
            "v16",
            "v16+"
        ]
    },
    "cas": {
        "alt": [],
        "args": "alias(choice('SE','IN'),$.enum)",
        "brief": "set case sensitivity",
        "category": "assembler",
        "caveat": "extension ignores this pseudo-op",
        "desc": "set case sensitivity, CAS SE sets case sensitive, CAS IN sets case insensitive",
        "label": [
            "var",
            "global",
            "local"
        ],
        "version": [
            "v16+"
        ]
    },
    "chk": {
        "alt": [],
        "args": null,
        "brief": "checksum",
        "category": "miscellaneous",
        "caveat": null,
        "desc": "put checksum in object code",
        "label": [
            "var",
            "global",
            "local"
        ],
        "version": [
            "v8",
            "v16",
            "v16+",
            "v32"
        ]
    },
    "cyc": {
        "alt": [],
        "args": "optional(alias(choice('OFF','AVE','FLAGS'),$.enum))",
        "brief": "cycle time",
        "category": "formatting",
        "caveat": null,
        "desc": "calculate and print cycle times",
        "label": [
            "var",
            "global",
            "local"
        ],
        "v8x": "/FLAGS/",
        "version": [
            "v8",
            "v16",
            "v16+"
        ]
    },
    "da": {
        "alt": [
            "dw"
        ],
        "args": "$._aexpr,repeat(seq(',',$._aexpr))",
        "brief": "define address or word",
        "category": "data storage",
        "caveat": null,
        "desc": "define little endian address",
        "label": [
            "var",
            "global",
            "local"
        ],
        "version": [
            "v8",
            "v16",
            "v16+",
            "v32"
        ]
    },
    "dat": {
        "alt": [],
        "args": "optional($._aexpr)",
        "brief": "date stamp",
        "category": "formatting",
        "caveat": "ProDOS only",
        "desc": "print the date and time",
        "label": [
            "var",
            "global",
            "local"
        ],
        "v16x": "/.*/",
        "v8x": "/.*/",
        "version": [
            "v8",
            "v16",
            "v16+"
        ]
    },
    "dci": {
        "alt": [],
        "args": "$._string_operand",
        "brief": "dextral character inverted",
        "category": "strings",
        "caveat": null,
        "desc": "same as ASC except string last character has opposite high bit",
        "label": [
            "var",
            "global",
            "local"
        ],
        "version": [
            "v8",
            "v16",
            "v16+",
            "v32"
        ]
    },
    "ddb": {
        "alt": [],
        "args": "$._aexpr,repeat(seq(',',$._aexpr))",
        "brief": "define double byte",
        "category": "data storage",
        "caveat": null,
        "desc": "define big endian address",
        "label": [
            "var",
            "global",
            "local"
        ],
        "version": [
            "v8",
            "v16",
            "v16+",
            "v32"
        ]
    },
    "dend": {
        "alt": [],
        "args": null,
        "brief": "end dummy section",
        "category": "assembler",
        "caveat": null,
        "desc": "mark the end of a dummy section",
        "label": [
            "var",
            "global",
            "local"
        ],
        "version": [
            "v8",
            "v16",
            "v16+",
            "v32"
        ]
    },
    "dfb": {
        "alt": [
            "db"
        ],
        "args": "$._data_aexpr,repeat(seq(',',$._data_aexpr))",
        "brief": "define byte",
        "category": "data storage",
        "caveat": null,
        "desc": "define byte, selects low byte, \\# and < ignored, > selects high byte",
        "label": [
            "var",
            "global",
            "local"
        ],
        "version": [
            "v8",
            "v16",
            "v16+",
            "v32"
        ]
    },
    "do": {
        "alt": [],
        "args": "$._aexpr",
        "brief": "do if true",
        "category": "conditionals",
        "caveat": null,
        "desc": "if expression is zero, stop generating object code",
        "label": [
            "var",
            "global",
            "local"
        ],
        "version": [
            "v8",
            "v16",
            "v16+",
            "v32"
        ]
    },
    "ds": {
        "alt": [],
        "args": "choice($._aexpr,seq($._aexpr,',',$._aexpr),'\\\\',seq('\\\\',',',$._aexpr))",
        "brief": "define storage",
        "category": "data storage",
        "caveat": null,
        "desc": "reserve space for string storage data",
        "label": [
            "var",
            "global",
            "local"
        ],
        "version": [
            "v8",
            "v16",
            "v16+",
            "v32"
        ]
    },
    "dsk": {
        "alt": [],
        "args": "$.filename",
        "brief": "assemble to disk",
        "category": "assembler",
        "caveat": null,
        "desc": "write assembled code directly to named file on disk",
        "label": [
            "var",
            "global",
            "local"
        ],
        "version": [
            "v8",
            "v16",
            "v16+",
            "v32"
        ]
    },
    "dum": {
        "alt": [],
        "args": "$._aexpr",
        "brief": "dummy section",
        "category": "assembler",
        "caveat": null,
        "desc": "start a section that produces label values, but no object code. Expression gives the ORG of the section.",
        "label": [
            "var",
            "global",
            "local"
        ],
        "version": [
            "v8",
            "v16",
            "v16+",
            "v32"
        ]
    },
    "else": {
        "alt": [],
        "args": null,
        "brief": "invert the last do",
        "category": "conditionals",
        "caveat": null,
        "desc": "invert the last do",
        "label": [
            "var",
            "global",
            "local"
        ],
        "version": [
            "v8",
            "v16",
            "v16+",
            "v32"
        ]
    },
    "end": {
        "alt": [],
        "args": null,
        "brief": "end of source",
        "category": "assembler",
        "caveat": "labels trailing END are not recognized",
        "desc": "ignore any trailing source code",
        "label": [
            "var",
            "global",
            "local"
        ],
        "version": [
            "v8",
            "v16",
            "v16+",
            "v32"
        ]
    },
    "ent": {
        "alt": [],
        "args": "optional(seq($._label,repeat(seq(',',$._label))))",
        "brief": "entry label",
        "category": "assembler",
        "caveat": null,
        "desc": "defines label as referenceable to an external label by another REL module",
        "label": [
            "var",
            "global"
        ],
        "v8x": "/.*/",
        "version": [
            "v8",
            "v16",
            "v16+",
            "v32"
        ]
    },
    "eom": {
        "alt": [
            "<<<"
        ],
        "args": null,
        "brief": "end macro",
        "category": "macro",
        "caveat": null,
        "desc": "end of a macro definition",
        "label": [
            "var",
            "global"
        ],
        "version": [
            "v8",
            "v16",
            "v16+",
            "v32"
        ]
    },
    "equ": {
        "alt": [
            "="
        ],
        "args": "$._aexpr",
        "brief": "equate",
        "category": "assembler",
        "caveat": "cannot equate to zero page number after label has been used",
        "desc": "equate label with expression",
        "label": [
            "var",
            "global"
        ],
        "version": [
            "v8",
            "v16",
            "v16+",
            "v32"
        ]
    },
    "err": {
        "alt": [],
        "args": "choice($.ptr_check,seq(optional('\\\\'),$._aexpr))",
        "brief": "force error",
        "category": "miscellaneous",
        "caveat": "Merlin 16+ ignores this unless the expression evaluates to zero page",
        "desc": "force error",
        "label": [
            "var",
            "global",
            "local"
        ],
        "version": [
            "v8",
            "v16",
            "v16+",
            "v32"
        ]
    },
    "exd": {
        "alt": [],
        "args": "optional(seq($._label,repeat(seq(',',$._label))))",
        "brief": "external label direct page",
        "category": "assembler",
        "caveat": null,
        "desc": "defines label as a direct page external for use by linker",
        "label": [
            "var",
            "global"
        ],
        "version": [
            "v16+"
        ]
    },
    "exp": {
        "alt": [],
        "args": "alias(choice('ON','OFF','ONLY'),$.enum)",
        "brief": "expand macros",
        "category": "formatting",
        "caveat": null,
        "desc": "ON prints entire macro, OFF prints only PMC, ONLY omits call line and end of macro line",
        "label": [
            "var",
            "global",
            "local"
        ],
        "version": [
            "v8",
            "v16",
            "v16+"
        ]
    },
    "ext": {
        "alt": [],
        "args": "optional(seq($._label,repeat(seq(',',$._label))))",
        "brief": "external label",
        "category": "assembler",
        "caveat": null,
        "desc": "defines label as external for use by linker",
        "label": [
            "var",
            "global"
        ],
        "v8x": "/.*/",
        "version": [
            "v8",
            "v16",
            "v16+",
            "v32"
        ]
    },
    "fin": {
        "alt": [],
        "args": null,
        "brief": "cancel last DO or IF",
        "category": "conditionals",
        "caveat": null,
        "desc": "cancel last DO or IF",
        "label": [
            "var",
            "global",
            "local"
        ],
        "version": [
            "v8",
            "v16",
            "v16+",
            "v32"
        ]
    },
    "flo": {
        "alt": [],
        "args": "$.dstring",
        "brief": "floating point constant",
        "category": "data storage",
        "caveat": null,
        "desc": "converts a dstring to a 10-byte floating point constant",
        "label": [
            "var",
            "global",
            "local"
        ],
        "version": [
            "v16+",
            "v32"
        ]
    },
    "fls": {
        "alt": [],
        "args": "$._string_operand",
        "brief": "flashing text",
        "category": "strings",
        "caveat": null,
        "desc": "put text in flashing format",
        "label": [
            "var",
            "global",
            "local"
        ],
        "version": [
            "v8",
            "v16",
            "v16+",
            "v32"
        ]
    },
    "hex": {
        "alt": [],
        "args": "$.hex_data",
        "brief": "hex data",
        "category": "data storage",
        "caveat": null,
        "desc": "insert plain hex data",
        "label": [
            "var",
            "global",
            "local"
        ],
        "version": [
            "v8",
            "v16",
            "v16+",
            "v32"
        ]
    },
    "if": {
        "alt": [],
        "args": "choice($.if_char,$.if_mx)",
        "brief": "test first character or MX",
        "category": "conditionals",
        "caveat": null,
        "desc": "if first character of variable matches, or if expression starting with MX is true, then assemble",
        "label": [
            "var",
            "global",
            "local"
        ],
        "v8x": "/^MX/",
        "version": [
            "v8",
            "v16",
            "v16+",
            "v32"
        ]
    },
    "inv": {
        "alt": [],
        "args": "$._string_operand",
        "brief": "inverse text",
        "category": "strings",
        "caveat": null,
        "desc": "put text in inverse format",
        "label": [
            "var",
            "global",
            "local"
        ],
        "version": [
            "v8",
            "v16",
            "v16+",
            "v32"
        ]
    },
    "kbd": {
        "alt": [],
        "args": "optional($.dstring)",
        "brief": "define label from keyboard",
        "category": "miscellaneous",
        "caveat": null,
        "desc": "define label from keyboard",
        "label": [
            "var",
            "global",
            "local"
        ],
        "version": [
            "v8",
            "v16",
            "v16+"
        ]
    },
    "lst": {
        "alt": [],
        "args": "optional(choice(alias(choice('ON','OFF','RTN'),$.enum),seq(alias('FILE',$.enum),',',$.filename)))",
        "brief": "listing control",
        "category": "formatting",
        "caveat": null,
        "desc": "ON starts listing, OFF stops listing, RTN restores to whatever was before the last LST",
        "label": [
            "var",
            "global",
            "local"
        ],
        "v16x": "/FILE/",
        "v8x": "/RTN|FILE/",
        "version": [
            "v8",
            "v16",
            "v16+"
        ]
    },
    "lstdo": {
        "alt": [],
        "args": "optional(alias('OFF',$.enum))",
        "brief": "list inactive areas",
        "category": "formatting",
        "caveat": null,
        "desc": "controls whether to list code where DO OFF is in effect",
        "label": [
            "var",
            "global",
            "local"
        ],
        "version": [
            "v8",
            "v16",
            "v16+"
        ]
    },
    "lup": {
        "alt": [],
        "args": "$._aexpr",
        "brief": "begin loop",
        "category": "miscellaneous",
        "caveat": null,
        "desc": "begin loop",
        "label": [
            "var",
            "global",
            "local"
        ],
        "version": [
            "v8",
            "v16",
            "v16+",
            "v32"
        ]
    },
    "mac": {
        "alt": [],
        "args": null,
        "brief": "begin macro",
        "category": "macro",
        "caveat": "assigned label cannot be referenced except as a macro call",
        "desc": "start of a macro definition",
        "label": [
            "var",
            "global"
        ],
        "version": [
            "v8",
            "v16",
            "v16+",
            "v32"
        ]
    },
    "mx": {
        "alt": [],
        "args": "$._aexpr",
        "brief": "long status mode",
        "category": "miscellaneous",
        "caveat": null,
        "desc": "set intended long status of the 65816",
        "label": [
            "var",
            "global",
            "local"
        ],
        "v8x": "/.*/",
        "version": [
            "v16",
            "v16+",
            "v32"
        ]
    },
    "obj": {
        "alt": [],
        "args": "$._aexpr",
        "brief": "set object",
        "category": "assembler",
        "caveat": "accepted only prior to start of code, must be in range $4000-$BFE0",
        "desc": "set the division line between symbol table and object code areas",
        "label": [
            "var",
            "global",
            "local"
        ],
        "version": [
            "v8",
            "v16",
            "v16+",
            "v32"
        ]
    },
    "org": {
        "alt": [],
        "args": "optional($._aexpr)",
        "brief": "set origin",
        "category": "assembler",
        "caveat": null,
        "desc": "set starting address of assembled code",
        "label": [
            "var",
            "global",
            "local"
        ],
        "version": [
            "v8",
            "v16",
            "v16+",
            "v32"
        ]
    },
    "pag": {
        "alt": [],
        "args": null,
        "brief": "send formfeed",
        "category": "formatting",
        "caveat": "no effect on screen listing",
        "desc": "send formfeed to the printer",
        "label": [
            "var",
            "global",
            "local"
        ],
        "version": [
            "v8",
            "v16",
            "v16+"
        ]
    },
    "pau": {
        "alt": [],
        "args": null,
        "brief": "pause",
        "category": "miscellaneous",
        "caveat": null,
        "desc": "pause until keypress",
        "label": [
            "var",
            "global",
            "local"
        ],
        "version": [
            "v8",
            "v16",
            "v16+"
        ]
    },
    "pmc": {
        "alt": [
            ">>>"
        ],
        "args": "field('mac',$.global_label),optional(seq($._arg_sep,$.macro_args))",
        "brief": "put macro call",
        "category": "macro",
        "caveat": null,
        "desc": "call the named macro",
        "label": [
            "var",
            "global",
            "local"
        ],
        "version": [
            "v8",
            "v16",
            "v16+",
            "v32"
        ]
    },
    "put": {
        "alt": [],
        "args": "$.filename",
        "brief": "put text file",
        "category": "assembler",
        "caveat": "Not recursive.  Macro definitions not allowed in PUT file.  Prefix `T.` is assumed for DOS 3.3, unless first character is less than `@`. Slot and drive are not accepted in ProDOS.",
        "desc": "insert a named file into the assembly source",
        "label": [
            "var",
            "global",
            "local"
        ],
        "version": [
            "v8",
            "v16",
            "v16+",
            "v32"
        ]
    },
    "rel": {
        "alt": [],
        "args": null,
        "brief": "relocatable code module",
        "category": "assembler",
        "caveat": "must occur prior to any labels",
        "desc": "generate code compatible with relocating linker",
        "label": [
            "var",
            "global",
            "local"
        ],
        "version": [
            "v8",
            "v16",
            "v16+",
            "v32"
        ]
    },
    "rev": {
        "alt": [],
        "args": "$.dstring",
        "brief": "reverse text",
        "category": "strings",
        "caveat": null,
        "desc": "put d-string backwards in memory",
        "label": [
            "var",
            "global",
            "local"
        ],
        "version": [
            "v8",
            "v16",
            "v16+",
            "v32"
        ]
    },
    "sav": {
        "alt": [],
        "args": "$.filename",
        "brief": "save object code",
        "category": "assembler",
        "caveat": null,
        "desc": "save object code to named file, starting at last SAV",
        "label": [
            "var",
            "global",
            "local"
        ],
        "version": [
            "v8",
            "v16",
            "v16+",
            "v32"
        ]
    },
    "skp": {
        "alt": [],
        "args": "$._aexpr",
        "brief": "skip lines",
        "category": "formatting",
        "caveat": null,
        "desc": "sends a number of carriage returns to the listing",
        "label": [
            "var",
            "global",
            "local"
        ],
        "version": [
            "v8",
            "v16",
            "v16+"
        ]
    },
    "str": {
        "alt": [],
        "args": "$._string_operand",
        "brief": "put delimited string with leading length byte",
        "category": "strings",
        "caveat": "trailing hex not counted in length",
        "desc": "put delimited string with leading length byte",
        "label": [
            "var",
            "global",
            "local"
        ],
        "version": [
            "v8",
            "v16",
            "v16+",
            "v32"
        ]
    },
    "strl": {
        "alt": [],
        "args": "$._string_operand",
        "brief": "put delimited string with leading length word",
        "category": "strings",
        "caveat": "trailing hex not counted in length",
        "desc": "put delimited string with leading length word",
        "label": [
            "var",
            "global",
            "local"
        ],
        "version": [
            "v16+",
            "v32"
        ]
    },
    "sw": {
        "alt": [],
        "args": null,
        "brief": "enable sweet 16",
        "category": "miscellaneous",
        "caveat": "Merlin 8",
        "desc": "enable sweet 16",
        "label": [
            "var",
            "global",
            "local"
        ],
        "version": [
            8
        ]
    },
    "tr": {
        "alt": [],
        "args": "optional(alias(choice('ON','OFF','ADR'),$.enum))",
        "brief": "truncate control",
        "category": "formatting",
        "caveat": "ADR only for Merlin 16 (suppress bank byte)",
        "desc": "limits the object code printout to three bytes per source line",
        "label": [
            "var",
            "global",
            "local"
        ],
        "v8x": "/ADR/",
        "version": [
            "v8",
            "v16",
            "v16+"
        ]
    },
    "ttl": {
        "alt": [],
        "args": "$.dstring",
        "brief": "define title heading",
        "category": "formatting",
        "caveat": "Merlin 16 only",
        "desc": "used to change title at top of a page during listing",
        "label": [
            "var",
            "global",
            "local"
        ],
        "version": [
            "v8",
            "v16",
            "v16+"
        ]
    },
    "typ": {
        "alt": [],
        "args": "$._aexpr",
        "brief": "set ProDOS file type",
        "category": "assembler",
        "caveat": null,
        "desc": "set filetype used by DSK or SAV, 0=none,6=BIN,255=SYS",
        "label": [
            "var",
            "global",
            "local"
        ],
        "version": [
            "v8",
            "v16",
            "v16+",
            "v32"
        ]
    },
    "use": {
        "alt": [],
        "args": "$.filename",
        "brief": "use file as library",
        "category": "assembler",
        "caveat": null,
        "desc": "use text file as macro library",
        "label": [
            "var",
            "global",
            "local"
        ],
        "version": [
            "v8",
            "v16",
            "v16+",
            "v32"
        ]
    },
    "usr": {
        "alt": [],
        "args": "$.literal",
        "brief": "user defined",
        "category": "miscellaneous",
        "caveat": null,
        "desc": "user defined",
        "label": [
            "var",
            "global",
            "local"
        ],
        "version": [
            "v8",
            "v16",
            "v16+",
            "v32"
        ]
    },
    "var": {
        "alt": [],
        "args": "$._aexpr,repeat(seq(';',$._aexpr))",
        "brief": "setup variables",
        "category": "assembler",
        "caveat": "often used just prior to PUT",
        "desc": "equate several variable labels in one step",
        "label": [
            "var",
            "global",
            "local"
        ],
        "version": [
            "v8",
            "v16",
            "v16+",
            "v32"
        ]
    },
    "xc": {
        "alt": [],
        "args": "optional(alias('OFF',$.enum))",
        "brief": "extended opcodes",
        "category": "miscellaneous",
        "caveat": null,
        "desc": "once enables 65C02, twice enables 65816, with argument OFF disables both",
        "label": [
            "var",
            "global",
            "local"
        ],
        "v16x": "/.*/",
        "v8x": "/.*/",
        "version": [
            "v8",
            "v16",
            "v16+"
        ]
    }
}