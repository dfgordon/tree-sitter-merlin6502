// `script/gammar-src.js` is for human editing
// `grammar.js` is generated by `opcode_processor.py`

// Downstream tools must resolve the following:
// * limitations on use of local labels
// * 6502 vs. 65C02 opcodes
// * 8 vs. 16 bit psuedo-opcodes

// Do not set this flag manually, let `build.py` handle it
const allow_lower_case = true;
const language_name = allow_lower_case ? 'merlin6502' : 'merlin6502casesens';

// Define constants

const ANYCHAR = /[ !"#$%&'()*+,\-.\/0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ\[\\\]\^_`abcdefghijklmnopqrstuvwxyz{|}~]/;
const NCHAR = /[ !#$%&'()*+,\-.\/0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ\[\\\]\^_`abcdefghijklmnopqrstuvwxyz{|}~]/;
const PCHAR = /[ !"#$%&()*+,\-.\/0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ\[\\\]\^_`abcdefghijklmnopqrstuvwxyz{|}~]/;
const SPCHAR = /[!"#$%&'()*+,\-.\/:;<=>?@\[\\\]\^_`{|}~]/;
const ARG = /[!"#$%&'()*+,\-.\/0123456789:<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ\[\\\]\^_`abcdefghijklmnopqrstuvwxyz{|}~]/;
const GLOB_LAB_BEG = /[;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ\[\\\^_`abcdefghijklmnopqrstuvwxyz{|}~]/;
const LAB_CHAR = /[0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ\[\\\]\^_`abcdefghijklmnopqrstuvwxyz{|}~]/;


// Tree-sitter grammar definition

module.exports = grammar({
	name: language_name,
	extras: $ => [],

	rules: {
		source_file: $ => repeat($._factor),
		_factor: $ => choice(
			$.program_counter,
			$.main_comment,
			$.macro_def,
			$.macro_callx,
			$.macro_calli,
			$.operation,
			$.pseudo_operation, // excludes macro pseudo-ops
			$._newline
		),
		program_counter: $ => seq($._label,optional(seq($._sep,$.comment)),$._newline), // set label to program counter

		// Macros
		macro_def: $ => seq($.macro_start,repeat($.macro_line),$.macro_end),
		macro_start: $ => seq($._label,$._sep,$.psop_mac,optional(seq($._sep,$.comment)),$._newline),
		macro_line: $ => choice($.program_counter,$.main_comment,$.operation,$.pseudo_operation,$.macro_start,$.macro_callx,$.macro_calli,$._newline),
		macro_end: $ => seq(optional($._label),$._sep,$.psop_eom,optional(seq($._sep,$.comment)),$._newline),
		macro_callx: $ => seq(optional($._label),$._sep,$.psop_pmc,$._sep,$._label,optional(seq($._arg_sep,$.macro_args)),optional(seq($._sep,$.comment)),$._newline),
		macro_calli: $ => seq(optional($._label),$._sep,$.global_label,optional(seq($._sep,$.macro_args)),optional(seq($._sep,$.comment)),$._newline),

		_newline: $ => seq(optional($._sep),/\r?\n/),
		_sep: $ => /[ \t]+/,
		_arg_sep: $ => choice('.',',','/','-','(',' '), // separates macro call from arguments in the long form, e.g., PMC mymacro,myargs

		_label: $ => choice($.global_label,$.local_label,$.var_label),
		global_label: $ => token(seq(GLOB_LAB_BEG,repeat(LAB_CHAR))), // max 13 (8bit) or 26 (16bit)
		local_label: $ => token(seq(':',repeat1(LAB_CHAR))), // max 13 (8bit) or 26 (16bit),cannot be first label in program,in macro,MAC,ENT,EXT, or EQU
		var_label: $ => token(seq(']',repeat1(LAB_CHAR))),

		// Operations

		op_adc: $ => 'ADC',
		op_and: $ => 'AND',
		op_asl: $ => 'ASL',
		op_bcc: $ => 'BCC',
		op_bcs: $ => 'BCS',
		op_beq: $ => 'BEQ',
		op_bit: $ => 'BIT',
		op_bmi: $ => 'BMI',
		op_bne: $ => 'BNE',
		op_bpl: $ => 'BPL',
		op_bra: $ => 'BRA',
		op_brk: $ => 'BRK',
		op_bvc: $ => 'BVC',
		op_bvs: $ => 'BVS',
		op_clc: $ => 'CLC',
		op_cld: $ => 'CLD',
		op_cli: $ => 'CLI',
		op_clv: $ => 'CLV',
		op_cmp: $ => 'CMP',
		op_cpx: $ => 'CPX',
		op_cpy: $ => 'CPY',
		op_dec: $ => 'DEC',
		op_dex: $ => 'DEX',
		op_dey: $ => 'DEY',
		op_eor: $ => 'EOR',
		op_inc: $ => 'INC',
		op_inx: $ => 'INX',
		op_iny: $ => 'INY',
		op_jmp: $ => 'JMP',
		op_jsr: $ => 'JSR',
		op_lda: $ => 'LDA',
		op_ldx: $ => 'LDX',
		op_ldy: $ => 'LDY',
		op_lsr: $ => 'LSR',
		op_nop: $ => 'NOP',
		op_ora: $ => 'ORA',
		op_pha: $ => 'PHA',
		op_php: $ => 'PHP',
		op_phx: $ => 'PHX',
		op_phy: $ => 'PHY',
		op_pla: $ => 'PLA',
		op_plp: $ => 'PLP',
		op_plx: $ => 'PLX',
		op_ply: $ => 'PLY',
		op_rol: $ => 'ROL',
		op_ror: $ => 'ROR',
		op_rti: $ => 'RTI',
		op_rts: $ => 'RTS',
		op_sbc: $ => 'SBC',
		op_sec: $ => 'SEC',
		op_sed: $ => 'SED',
		op_sei: $ => 'SEI',
		op_sta: $ => 'STA',
		op_stx: $ => 'STX',
		op_sty: $ => 'STY',
		op_stz: $ => 'STZ',
		op_tax: $ => 'TAX',
		op_tay: $ => 'TAY',
		op_trb: $ => 'TRB',
		op_tsb: $ => 'TSB',
		op_tsx: $ => 'TSX',
		op_txa: $ => 'TXA',
		op_txs: $ => 'TXS',
		op_tya: $ => 'TYA',
		operation: $ => choice(
			seq(optional($._label), $._sep, $.op_adc, optional($.force), $._sep, choice($.imm,$.addr_x,$.iaddr,$.addr_y,$.iaddr_y,$.iaddr_ix,$.addr), optional(seq($._sep,$.comment)), $._newline),
			seq(optional($._label), $._sep, $.op_and, optional($.force), $._sep, choice($.imm,$.addr_x,$.iaddr,$.addr_y,$.iaddr_y,$.iaddr_ix,$.addr), optional(seq($._sep,$.comment)), $._newline),
			seq(optional($._label), $._sep, $.op_asl, optional($.force), optional(seq($._sep,choice($.addr_x,$.addr))), optional(seq($._sep,$.comment)), $._newline),
			seq(optional($._label), $._sep, $.op_bcc, optional($.force), $._sep, $.addr, optional(seq($._sep,$.comment)), $._newline),
			seq(optional($._label), $._sep, $.op_bcs, optional($.force), $._sep, $.addr, optional(seq($._sep,$.comment)), $._newline),
			seq(optional($._label), $._sep, $.op_beq, optional($.force), $._sep, $.addr, optional(seq($._sep,$.comment)), $._newline),
			seq(optional($._label), $._sep, $.op_bit, optional($.force), $._sep, choice($.addr_x,$.addr,$.imm), optional(seq($._sep,$.comment)), $._newline),
			seq(optional($._label), $._sep, $.op_bmi, optional($.force), $._sep, $.addr, optional(seq($._sep,$.comment)), $._newline),
			seq(optional($._label), $._sep, $.op_bne, optional($.force), $._sep, $.addr, optional(seq($._sep,$.comment)), $._newline),
			seq(optional($._label), $._sep, $.op_bpl, optional($.force), $._sep, $.addr, optional(seq($._sep,$.comment)), $._newline),
			seq(optional($._label), $._sep, $.op_bra, optional($.force), $._sep, $.addr, optional(seq($._sep,$.comment)), $._newline),
			seq(optional($._label), $._sep, $.op_brk, optional(seq($._sep,$.comment)), $._newline),
			seq(optional($._label), $._sep, $.op_bvc, optional($.force), $._sep, $.addr, optional(seq($._sep,$.comment)), $._newline),
			seq(optional($._label), $._sep, $.op_bvs, optional($.force), $._sep, $.addr, optional(seq($._sep,$.comment)), $._newline),
			seq(optional($._label), $._sep, $.op_clc, optional(seq($._sep,$.comment)), $._newline),
			seq(optional($._label), $._sep, $.op_cld, optional(seq($._sep,$.comment)), $._newline),
			seq(optional($._label), $._sep, $.op_cli, optional(seq($._sep,$.comment)), $._newline),
			seq(optional($._label), $._sep, $.op_clv, optional(seq($._sep,$.comment)), $._newline),
			seq(optional($._label), $._sep, $.op_cmp, optional($.force), $._sep, choice($.imm,$.addr_x,$.iaddr,$.addr_y,$.iaddr_y,$.iaddr_ix,$.addr), optional(seq($._sep,$.comment)), $._newline),
			seq(optional($._label), $._sep, $.op_cpx, optional($.force), $._sep, choice($.addr,$.imm), optional(seq($._sep,$.comment)), $._newline),
			seq(optional($._label), $._sep, $.op_cpy, optional($.force), $._sep, choice($.addr,$.imm), optional(seq($._sep,$.comment)), $._newline),
			seq(optional($._label), $._sep, $.op_dec, optional($.force), optional(seq($._sep,choice($.addr_x,$.addr))), optional(seq($._sep,$.comment)), $._newline),
			seq(optional($._label), $._sep, $.op_dex, optional(seq($._sep,$.comment)), $._newline),
			seq(optional($._label), $._sep, $.op_dey, optional(seq($._sep,$.comment)), $._newline),
			seq(optional($._label), $._sep, $.op_eor, optional($.force), $._sep, choice($.imm,$.addr_x,$.iaddr,$.addr_y,$.iaddr_y,$.iaddr_ix,$.addr), optional(seq($._sep,$.comment)), $._newline),
			seq(optional($._label), $._sep, $.op_inc, optional($.force), optional(seq($._sep,choice($.addr_x,$.addr))), optional(seq($._sep,$.comment)), $._newline),
			seq(optional($._label), $._sep, $.op_inx, optional(seq($._sep,$.comment)), $._newline),
			seq(optional($._label), $._sep, $.op_iny, optional(seq($._sep,$.comment)), $._newline),
			seq(optional($._label), $._sep, $.op_jmp, optional($.force), $._sep, choice($.iaddr_ix,$.iaddr,$.addr), optional(seq($._sep,$.comment)), $._newline),
			seq(optional($._label), $._sep, $.op_jsr, optional($.force), $._sep, $.addr, optional(seq($._sep,$.comment)), $._newline),
			seq(optional($._label), $._sep, $.op_lda, optional($.force), $._sep, choice($.imm,$.addr_x,$.iaddr,$.addr_y,$.iaddr_y,$.iaddr_ix,$.addr), optional(seq($._sep,$.comment)), $._newline),
			seq(optional($._label), $._sep, $.op_ldx, optional($.force), $._sep, choice($.addr,$.addr_y,$.imm), optional(seq($._sep,$.comment)), $._newline),
			seq(optional($._label), $._sep, $.op_ldy, optional($.force), $._sep, choice($.addr_x,$.addr,$.imm), optional(seq($._sep,$.comment)), $._newline),
			seq(optional($._label), $._sep, $.op_lsr, optional($.force), optional(seq($._sep,choice($.addr_x,$.addr))), optional(seq($._sep,$.comment)), $._newline),
			seq(optional($._label), $._sep, $.op_nop, optional(seq($._sep,$.comment)), $._newline),
			seq(optional($._label), $._sep, $.op_ora, optional($.force), $._sep, choice($.imm,$.addr_x,$.iaddr,$.addr_y,$.iaddr_y,$.iaddr_ix,$.addr), optional(seq($._sep,$.comment)), $._newline),
			seq(optional($._label), $._sep, $.op_pha, optional(seq($._sep,$.comment)), $._newline),
			seq(optional($._label), $._sep, $.op_php, optional(seq($._sep,$.comment)), $._newline),
			seq(optional($._label), $._sep, $.op_phx, optional(seq($._sep,$.comment)), $._newline),
			seq(optional($._label), $._sep, $.op_phy, optional(seq($._sep,$.comment)), $._newline),
			seq(optional($._label), $._sep, $.op_pla, optional(seq($._sep,$.comment)), $._newline),
			seq(optional($._label), $._sep, $.op_plp, optional(seq($._sep,$.comment)), $._newline),
			seq(optional($._label), $._sep, $.op_plx, optional(seq($._sep,$.comment)), $._newline),
			seq(optional($._label), $._sep, $.op_ply, optional(seq($._sep,$.comment)), $._newline),
			seq(optional($._label), $._sep, $.op_rol, optional($.force), optional(seq($._sep,choice($.addr_x,$.addr))), optional(seq($._sep,$.comment)), $._newline),
			seq(optional($._label), $._sep, $.op_ror, optional($.force), optional(seq($._sep,choice($.addr_x,$.addr))), optional(seq($._sep,$.comment)), $._newline),
			seq(optional($._label), $._sep, $.op_rti, optional(seq($._sep,$.comment)), $._newline),
			seq(optional($._label), $._sep, $.op_rts, optional(seq($._sep,$.comment)), $._newline),
			seq(optional($._label), $._sep, $.op_sbc, optional($.force), $._sep, choice($.imm,$.addr_x,$.iaddr,$.addr_y,$.iaddr_y,$.iaddr_ix,$.addr), optional(seq($._sep,$.comment)), $._newline),
			seq(optional($._label), $._sep, $.op_sec, optional(seq($._sep,$.comment)), $._newline),
			seq(optional($._label), $._sep, $.op_sed, optional(seq($._sep,$.comment)), $._newline),
			seq(optional($._label), $._sep, $.op_sei, optional(seq($._sep,$.comment)), $._newline),
			seq(optional($._label), $._sep, $.op_sta, optional($.force), $._sep, choice($.addr_x,$.iaddr,$.addr_y,$.iaddr_y,$.iaddr_ix,$.addr), optional(seq($._sep,$.comment)), $._newline),
			seq(optional($._label), $._sep, $.op_stx, optional($.force), $._sep, choice($.addr_y,$.addr), optional(seq($._sep,$.comment)), $._newline),
			seq(optional($._label), $._sep, $.op_sty, optional($.force), $._sep, choice($.addr_x,$.addr), optional(seq($._sep,$.comment)), $._newline),
			seq(optional($._label), $._sep, $.op_stz, optional($.force), $._sep, choice($.addr_x,$.addr), optional(seq($._sep,$.comment)), $._newline),
			seq(optional($._label), $._sep, $.op_tax, optional(seq($._sep,$.comment)), $._newline),
			seq(optional($._label), $._sep, $.op_tay, optional(seq($._sep,$.comment)), $._newline),
			seq(optional($._label), $._sep, $.op_trb, optional($.force), $._sep, $.addr, optional(seq($._sep,$.comment)), $._newline),
			seq(optional($._label), $._sep, $.op_tsb, optional($.force), $._sep, $.addr, optional(seq($._sep,$.comment)), $._newline),
			seq(optional($._label), $._sep, $.op_tsx, optional(seq($._sep,$.comment)), $._newline),
			seq(optional($._label), $._sep, $.op_txa, optional(seq($._sep,$.comment)), $._newline),
			seq(optional($._label), $._sep, $.op_txs, optional(seq($._sep,$.comment)), $._newline),
			seq(optional($._label), $._sep, $.op_tya, optional(seq($._sep,$.comment)), $._newline)
		),


		// Pseudo-operations

		psop_equ: $ => choice('EQU','='),
		psop_ext: $ => 'EXT',
		psop_ent: $ => 'ENT',
		psop_org: $ => 'ORG',
		psop_rel: $ => 'REL',
		psop_obj: $ => 'OBJ',
		psop_put: $ => 'PUT',
		psop_use: $ => 'USE',
		psop_var: $ => 'VAR',
		psop_sav: $ => 'SAV',
		psop_typ: $ => 'TYP',
		psop_dsk: $ => 'DSK',
		psop_end: $ => 'END',
		psop_dum: $ => 'DUM',
		psop_dend: $ => 'DEND',
		psop_ast: $ => 'AST',
		psop_cyc: $ => 'CYC',
		psop_dat: $ => 'DAT',
		psop_exp: $ => 'EXP',
		psop_lst: $ => 'LST',
		psop_lstdo: $ => 'LSTDO',
		psop_pag: $ => 'PAG',
		psop_ttl: $ => 'TTL',
		psop_skp: $ => 'SKP',
		psop_tr: $ => 'TR',
		psop_asc: $ => 'ASC',
		psop_dci: $ => 'DCI',
		psop_inv: $ => 'INV',
		psop_fls: $ => 'FLS',
		psop_rev: $ => 'REV',
		psop_str: $ => 'STR',
		psop_da: $ => choice('DA','DW'),
		psop_ddb: $ => 'DDB',
		psop_dfb: $ => choice('DFB','DB'),
		psop_adr: $ => 'ADR',
		psop_adrl: $ => 'ADRL',
		psop_hex: $ => 'HEX',
		psop_ds: $ => 'DS',
		psop_do: $ => 'DO',
		psop_else: $ => 'ELSE',
		psop_if: $ => 'IF',
		psop_fin: $ => 'FIN',
		psop_chk: $ => 'CHK',
		psop_err: $ => 'ERR',
		psop_kbd: $ => 'KBD',
		psop_lup: $ => 'LUP',
		psop_end_lup: $ => '--^',
		psop_mx: $ => 'MX',
		psop_pau: $ => 'PAU',
		psop_sw: $ => 'SW',
		psop_usr: $ => 'USR',
		psop_xc: $ => 'XC',
		psop_mac: $ => 'MAC',
		psop_eom: $ => choice('EOM','<<<'),
		psop_pmc: $ => choice('PMC','>>>'),
		pseudo_operation: $ => choice(
			seq(optional($._label), $._sep, $.psop_equ, $._sep, $._aexpr, optional(seq($._sep,$.comment)), $._newline),
			seq(optional($._label), $._sep, $.psop_ext, optional(seq($._sep,$.comment)), $._newline),
			seq(optional($._label), $._sep, $.psop_ent, optional(seq($._sep,$.comment)), $._newline),
			seq(optional($._label), $._sep, $.psop_org, $._sep, optional($._aexpr), optional(seq($._sep,$.comment)), $._newline),
			seq(optional($._label), $._sep, $.psop_rel, optional(seq($._sep,$.comment)), $._newline),
			seq(optional($._label), $._sep, $.psop_obj, $._sep, $._aexpr, optional(seq($._sep,$.comment)), $._newline),
			seq(optional($._label), $._sep, $.psop_put, $._sep, $.filename, optional(seq($._sep,$.comment)), $._newline),
			seq(optional($._label), $._sep, $.psop_use, $._sep, $.filename, optional(seq($._sep,$.comment)), $._newline),
			seq(optional($._label), $._sep, $.psop_var, $._sep, $._aexpr,repeat(seq(';',$._aexpr)), optional(seq($._sep,$.comment)), $._newline),
			seq(optional($._label), $._sep, $.psop_sav, $._sep, $.filename, optional(seq($._sep,$.comment)), $._newline),
			seq(optional($._label), $._sep, $.psop_typ, $._sep, $._aexpr, optional(seq($._sep,$.comment)), $._newline),
			seq(optional($._label), $._sep, $.psop_dsk, $._sep, $.filename, optional(seq($._sep,$.comment)), $._newline),
			seq(optional($._label), $._sep, $.psop_end, optional(seq($._sep,$.comment)), $._newline),
			seq(optional($._label), $._sep, $.psop_dum, $._sep, $._aexpr, optional(seq($._sep,$.comment)), $._newline),
			seq(optional($._label), $._sep, $.psop_dend, optional(seq($._sep,$.comment)), $._newline),
			seq(optional($._label), $._sep, $.psop_ast, $._sep, $._aexpr, optional(seq($._sep,$.comment)), $._newline),
			seq(optional($._label), $._sep, $.psop_cyc, $._sep, optional(choice('OFF','AVE')), optional(seq($._sep,$.comment)), $._newline),
			seq(optional($._label), $._sep, $.psop_dat, optional(seq($._sep,$.comment)), $._newline),
			seq(optional($._label), $._sep, $.psop_exp, $._sep, choice('ON','OFF','ONLY'), optional(seq($._sep,$.comment)), $._newline),
			seq(optional($._label), $._sep, $.psop_lst, $._sep, optional(choice('ON','OFF')), optional(seq($._sep,$.comment)), $._newline),
			seq(optional($._label), $._sep, $.psop_lstdo, $._sep, optional('OFF'), optional(seq($._sep,$.comment)), $._newline),
			seq(optional($._label), $._sep, $.psop_pag, optional(seq($._sep,$.comment)), $._newline),
			seq(optional($._label), $._sep, $.psop_ttl, $._sep, $.dstring, optional(seq($._sep,$.comment)), $._newline),
			seq(optional($._label), $._sep, $.psop_skp, $._sep, $._aexpr, optional(seq($._sep,$.comment)), $._newline),
			seq(optional($._label), $._sep, $.psop_tr, $._sep, optional(choice('ON','OFF')), optional(seq($._sep,$.comment)), $._newline),
			seq(optional($._label), $._sep, $.psop_asc, $._sep, $._string_operand, optional(seq($._sep,$.comment)), $._newline),
			seq(optional($._label), $._sep, $.psop_dci, $._sep, $._string_operand, optional(seq($._sep,$.comment)), $._newline),
			seq(optional($._label), $._sep, $.psop_inv, $._sep, $._string_operand, optional(seq($._sep,$.comment)), $._newline),
			seq(optional($._label), $._sep, $.psop_fls, $._sep, $._string_operand, optional(seq($._sep,$.comment)), $._newline),
			seq(optional($._label), $._sep, $.psop_rev, $._sep, $.dstring, optional(seq($._sep,$.comment)), $._newline),
			seq(optional($._label), $._sep, $.psop_str, $._sep, $._string_operand, optional(seq($._sep,$.comment)), $._newline),
			seq(optional($._label), $._sep, $.psop_da, $._sep, $._aexpr,repeat(seq(',',$._aexpr)), optional(seq($._sep,$.comment)), $._newline),
			seq(optional($._label), $._sep, $.psop_ddb, $._sep, $._aexpr,repeat(seq(',',$._aexpr)), optional(seq($._sep,$.comment)), $._newline),
			seq(optional($._label), $._sep, $.psop_dfb, $._sep, $._eaexpr,repeat(seq(',',$._eaexpr)), optional(seq($._sep,$.comment)), $._newline),
			seq(optional($._label), $._sep, $.psop_adr, optional(seq($._sep,$.comment)), $._newline),
			seq(optional($._label), $._sep, $.psop_adrl, optional(seq($._sep,$.comment)), $._newline),
			seq(optional($._label), $._sep, $.psop_hex, $._sep, $.hex_data, optional(seq($._sep,$.comment)), $._newline),
			seq(optional($._label), $._sep, $.psop_ds, $._sep, choice($._aexpr,seq($._aexpr,',',$._aexpr),'\\',seq('\\',',',$._aexpr)), optional(seq($._sep,$.comment)), $._newline),
			seq(optional($._label), $._sep, $.psop_do, $._sep, $._aexpr, optional(seq($._sep,$.comment)), $._newline),
			seq(optional($._label), $._sep, $.psop_else, optional(seq($._sep,$.comment)), $._newline),
			seq(optional($._label), $._sep, $.psop_if, $._sep, $.schar,$.schar,$.var_label, optional(seq($._sep,$.comment)), $._newline),
			seq(optional($._label), $._sep, $.psop_fin, optional(seq($._sep,$.comment)), $._newline),
			seq(optional($._label), $._sep, $.psop_chk, optional(seq($._sep,$.comment)), $._newline),
			seq(optional($._label), $._sep, $.psop_err, $._sep, optional('\\'),$._aexpr, optional(seq($._sep,$.comment)), $._newline),
			seq(optional($._label), $._sep, $.psop_kbd, $._sep, optional($.dstring), optional(seq($._sep,$.comment)), $._newline),
			seq(optional($._label), $._sep, $.psop_lup, $._sep, $._aexpr, optional(seq($._sep,$.comment)), $._newline),
			seq(optional($._label), $._sep, $.psop_end_lup, optional(seq($._sep,$.comment)), $._newline),
			seq(optional($._label), $._sep, $.psop_mx, optional(seq($._sep,$.comment)), $._newline),
			seq(optional($._label), $._sep, $.psop_pau, optional(seq($._sep,$.comment)), $._newline),
			seq(optional($._label), $._sep, $.psop_sw, optional(seq($._sep,$.comment)), $._newline),
			seq(optional($._label), $._sep, $.psop_usr, $._sep, $.literal, optional(seq($._sep,$.comment)), $._newline),
			seq(optional($._label), $._sep, $.psop_xc, optional(seq($._sep,$.comment)), $._newline)
		),


		// Macro Primitives

		macro_args: $ => seq($.arg,repeat(seq(';',$.arg))),
		arg: $ => repeat1(ARG),

		// Strings

		_string_operand: $ => seq($.dstring,optional(seq(',',$.hex_data))),
		// TODO: MERLIN dstrings can use any delimiter, with related rules about ascii bit 7
		// MERLIN also allows unterminated strings which we do not at present.
		dstring: $ => choice(
			seq('"',repeat(NCHAR),'"'),
			seq("'",repeat(PCHAR),"'")
		),

		// Addressing Modes

		rel: $ => $._aexpr,
		imm: $ => seq($.imm_prefix,$._aexpr),
		addr: $ => $._aexpr,
		addr_x: $ => seq($._aexpr,$.mode_x),
		addr_y: $ => seq($._aexpr,$.mode_y),
		iaddr_ix: $ => seq($.mode_iopen,$._aexpr,$.mode_iix),
		iaddr_y: $ => seq($.mode_iopen,$._aexpr,$.mode_iy),
		iaddr: $ => seq($.mode_iopen,$._aexpr,$.mode_iclose),

		mode_x: $ => ',X',
		mode_y: $ => ',Y',
		mode_iopen: $ => '(',
		mode_iclose: $ => ')',
		mode_iix: $ => ',X)',
		mode_iy: $ => '),Y',

		// Expressions

		_eaexpr: $ => seq(optional($.imm_prefix),$._aexpr),
		_aexpr: $ => choice(
			$._label,
			$.number,
			$.pchar,
			$.nchar,
			$.current_addr,
			$.unary_aexpr,
			$.binary_aexpr
		),
		unary_aexpr: $ => prec(1,choice(seq($.eop_plus,$._aexpr),seq($.eop_minus,$._aexpr))),
		// MERLIN has no operator precedence: left to right always prevails
		binary_aexpr: $ => prec.left(seq($._aexpr,choice(
			$.eop_plus,$.eop_minus,$.eop_times,$.eop_div,$.eop_or,$.eop_and,$.eop_xor
		),$._aexpr)),

		eop_plus: $ => '+',
		eop_minus: $ => '-',
		eop_times: $ => '*',
		eop_div: $ => '/',
		eop_or: $ => '.',
		eop_and: $ => '&',
		eop_xor: $ => '!',

		// Primitive Expressions

		imm_prefix: $ => choice('#','#<','#>','#^'),
		hex_byte: $ => /[0-9A-Fa-f][0-9A-Fa-f]/,
		hex_data: $ => seq($.hex_byte,repeat(seq(optional(','),$.hex_byte))),
		filename: $ => repeat1(ANYCHAR),

		number: $ => choice($.decimal,$.hexadecimal,$.binary),
		decimal: $ => repeat1(/[0-9]/),
		hexadecimal: $ => seq('$',repeat1(/[0-9A-Fa-f]/)),
		binary: $ => seq('%',repeat1(/[01]/)),

		schar: $ => PCHAR,
		pchar: $ => seq("'",PCHAR,optional("'")),
		nchar: $ => seq('"',NCHAR,optional('"')),

		current_addr: $ => '*',

		force: $ => SPCHAR, // more restrictive than Merlin

		literal: $ => /.*/,

		// Comments

		comment: $ => seq(';',$.comment_text), // max 64 - len(operand)
		comment_text: $ => /.*/,
		main_comment: $ => seq(/\s*\*.*/,$._newline) // max 64
	}
});
